export type Chat = {
    conversationId: string;
    turnId: string;
};
export type ChatDetail = {
    type: "chat";
    data: Chat;
};
export type DeserializedSearchResult = {
    id: string;
    snippet: {
        pre: string;
        text: string;
        post: string;
    };
    source: string;
    url?: string;
    title?: string;
    metadata: Record<string, unknown>;
};
export type FactualConsistency = {
    score: number;
};
export type FactualConsistencyDetail = {
    type: "factualConsistency";
    data: FactualConsistency;
};
export type ParsedResult = {
    responseSet: {
        document: Array<{
            id: string;
            metadata: Array<DocMetadata>;
        }>;
        response: Array<{
            corpusKey: {
                corpusId: number;
            };
            documentIndex: number;
            score: number;
            text: string;
        }>;
    };
    summary: {
        chat: Chat;
        factualConsistency: FactualConsistency | null;
        done: boolean;
        text: string;
    };
};
export type StreamQueryConfig = {
    filter?: string;
    queryValue?: string;
    language?: SummaryLanguage;
    rerank?: boolean;
    rerankNumResults?: number;
    rerankerId?: number;
    rerankDiversityBias?: number;
    lambda?: number;
    summaryNumResults?: number;
    summaryNumSentences?: number;
    summaryPromptName?: string;
    enableFactualConsistencyScore?: boolean;
    customerId: string;
    corpusIds: Array<string>;
    apiKey: string;
    endpoint?: string;
    chat?: ChatConfig;
};
type ChatConfig = {
    store: boolean;
    conversationId?: string;
};
export type StreamUpdate = {
    references: Array<DeserializedSearchResult> | null;
    updatedText: string | null;
    isDone: boolean;
    details: Array<StreamUpdateDetail> | null;
};
export type StreamUpdateDetail = ChatDetail | FactualConsistencyDetail;
export type StreamUpdateHandler = (update: StreamUpdate) => void;
export type SearchResponse = {
    document: Array<SearchResponseDoc>;
    response: Array<SearchResponseResult>;
    summary: Array<SearchResponseSummary>;
};
type SearchResponseDoc = {
    id: string;
    metadata: Array<DocMetadata>;
};
type SearchResponseResult = {
    corpusKey: {
        corpusId: string;
        customerId: string;
        dim: string[];
    };
    documentIndex: string;
    resultLength: number;
    resultOffset: number;
    score: number;
    text: string;
};
type SearchResponseSummary = {
    text?: string;
    status?: string;
};
export type DocMetadata = {
    name: string;
    value: string;
};
declare const SUMMARY_LANGUAGES: readonly ["auto", "eng", "deu", "fra", "zho", "kor", "ara", "rus", "tha", "nld", "ita", "por", "spa", "jpn", "pol", "tur", "heb", "vie", "ind", "ces", "ukr", "ell", "fas", "hin", "urd", "swe", "ben", "msa", "ron"];
export type SummaryLanguage = (typeof SUMMARY_LANGUAGES)[number];
export {};
